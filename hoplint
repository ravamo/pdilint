#!/usr/bin/env ruby

require 'colorize'
require 'nokogiri'
require 'optparse'

# Configuration
CONST_FILENAME= "[a-z](_[a-z]+)*"
CONST_STEPNAME= "[a-z]([A-Z0-9]*[a-z][a-z0-9]*[A-Z]|[a-z0-9]*[A-Z][A-Z0-9]*[a-z])[A-Za-z0-9]*"
CONST_PATHS = "^\$\{BI_SOLUTION_PATH\}([a-zA-Z]|\.\.|\/|\_|\\)*(\.ktr|\.kjb){1}$"


def hoplint(directorty)
	files_list=[]
	Dir.glob("#{directorty}/*.{kjb,ktr}") do |thefile| 
		exit_this_etl(thefile) 
		#remove(thefile)
		if is_job("#{File.dirname(thefile)}/#{File.basename(thefile)}")
			rules_job("#{File.dirname(thefile)}/#{File.basename(thefile)}")
		else
			rules_transformation("#{File.dirname(thefile)}/#{File.basename(thefile)}")
		end
	end
end	


def rules_transformation(file)
	puts "Cheking Transformation".blue
	puts "Cheking the Database connection".blue
	check_db_connection("#{File.dirname(file)}/#{File.basename(file)}")
	puts "Cheking step name".blue
	check_step_name("#{File.dirname(file)}/#{File.basename(file)}")
	puts "Cheking step name".blue
	empty_flow("#{File.dirname(file)}/#{File.basename(file)}")
end

def rules_job(file)
	puts "Cheking job".blue
	puts "Cheking the Database connection".blue
	check_db_connection("#{File.dirname(file)}/#{File.basename(file)}")
	puts "Cheking step name".blue
	check_step_name("#{File.dirname(file)}/#{File.basename(file)}")
	puts "Cheking path".blue
	check_file("#{File.dirname(file)}/#{File.basename(file)}")
end

def stack_etl(file,elemnt)
	return file.include?elemnt
end

def remove(file)
	doc = Nokogiri::XML(File.open("#{file}"))
	doc.xpath('//step/type').each do |char_element|
		if char_element.text.eql?"SelectValues"
			puts "#{char_element.name}:#{char_element.text}"
			puts char_element
		end
	end
end

def empty_flow(file)
	doc = Nokogiri::XML(File.open("#{file}"))
	doc.xpath('//order/hop/enabled').each do |char_element|
		if char_element.text.eql?"N"
			puts "["+" WAR ".blue+"] you have a disabled  #{File.basename(file)} is at #{File.dirname(file)}" 
		end
	end
end

def exit_this_etl(file)
	if(File.exist?("#{file}")) 
  		puts "["+" OK ".green+"] the file  #{File.basename(file)} is at #{File.dirname(file)}" 
	else 
  		puts "["+" BAD ".red+"] the file  #{File.basename(file)} is at #{File.dirname(file)} not found" 
	end
end

def check_db_connection(file)
	doc = Nokogiri::XML(File.open("#{file}"))
	doc.xpath('//connection/access').each do |char_element|
		if char_element.text.eql?"JNDI"
			puts	"["+" OK ".green+"] The connection type #{File.basename(file)} is at #{File.dirname(file)} is"+ " #{char_element.text}".green 
		else
			puts	"["+" BAD ".red+"] The connection type #{File.basename(file)} is at #{File.dirname(file)} is"+ " #{char_element.text}".red
		end
	end			
end

def check_item_regex(patter,matching)
	patter.match(/#{matching}/) ? true : false
end

def check_step_name(file)
	doc = Nokogiri::XML(File.open("#{file}"))
	doc.xpath('//step/name').each do |char_element|
		if check_item_regex(char_element.text,CONST_STEPNAME)
			 puts	"["+" OK ".green+"] The step name "+ "#{char_element.text}".green+ " this file  #{File.basename(file)} is at #{File.dirname(file)}" 
		else
			 puts	"["+" BAD ".red+"]  The step name "+ "#{char_element.text}".red+ " in this file  #{File.basename(file)} is at #{File.dirname(file)}" 
		end
	end
end

def check_file(file)
	doc = Nokogiri::XML(File.open("#{file}"))
	doc.xpath('//entries/entry/filename').each do |char_element|
		if char_element.text.match(/CONST_PATHS/)
			puts	"["+" OK ".green+"] The path #{char_element.text} is good"
		else
			puts	"["+" BAD ".red+"] The path #{char_element.text} is worng"
		end
	end
end

def check_file_name(file)
	if check_item_regex(file.split("/").last(),CONST_FILENAME)
   		 puts	"["+" OK ".green+"] The step name #{file.split("/").last()} in this file  #{File.basename(file)} is at #{File.dirname(file)}" 
	else
		 puts	"["+" BAD ".red+"] The step name  #{file.split("/").last()}  in this file  #{File.basename(file)} is at #{File.dirname(file)}" 
	end
end

def is_job(file)
 	File.extname("#{file}") == '.kjb' ? true : false
end

hoplint('/path')
